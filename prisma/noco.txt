// schema.prisma
generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("PG_DATABASE_URL")
}

enum UserRole {
   ADMIN
   STAFF
   USER
}

enum QueueStatus {
   WAITING
   PROCESSING
   COMPLETED
   CANCELLED
}

enum ServiceType {
   TRUE_COPY
   VERIFY
}

enum Permission {
   QUEUE_VIEW
   QUEUE_PROCESS
   QUEUE_DELETE
   QUEUE_UPDATE
   QUEUE_ADD_NOTES
   USERS_MANAGE
}

model User {
   id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   email         String       @unique
   name          String
   emailVerified Boolean
   image         String?
   username      String?      @unique
   role          UserRole     @default(ADMIN)
   permissions   Permission[]
   createdAt     DateTime
   updatedAt     DateTime

   // Relations
   sessions    Session[]
   accounts    Account[]
   queues      Queue[]
   profile     Profile?
   attachments Attachment[]

   @@map("user")
}

model Session {
   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   expiresAt DateTime
   token     String   @unique
   createdAt DateTime
   updatedAt DateTime
   ipAddress String?
   userAgent String?
   userId    String   @db.Uuid
   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("session")
}

model Account {
   id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   accountId             String
   providerId            String
   userId                String    @db.Uuid
   user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   password              String?
   accessToken           String?
   refreshToken          String?
   idToken               String?
   accessTokenExpiresAt  DateTime?
   refreshTokenExpiresAt DateTime?
   scope                 String?
   createdAt             DateTime
   updatedAt             DateTime

   @@map("account")
}

model Verification {
   id         String    @id
   identifier String
   value      String
   expiresAt  DateTime
   createdAt  DateTime?
   updatedAt  DateTime?

   @@map("verification")
}

model Queue {
   id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   ticketNumber    Int         @unique @default(autoincrement())
   kioskNumber     Int?
   status          QueueStatus @default(WAITING)
   serviceType     ServiceType
   userId          String?     @db.Uuid
   email           String?
   documents       String[]
   processingNotes String?
   createdAt       DateTime    @default(now())
   updatedAt       DateTime    @updatedAt
   completedAt     DateTime?

   // Relations
   user User? @relation(fields: [userId], references: [id])

   @@map("queue")
}

enum AttachmentType {
   BIRTH_CERTIFICATE
   DEATH_CERTIFICATE
   MARRIAGE_CERTIFICATE
}

model Profile {
   id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   userId      String    @unique @db.Uuid
   dateOfBirth DateTime?
   phoneNumber String?
   address     String?
   city        String?
   state       String?
   country     String?
   postalCode  String?
   bio         String?   @db.Text
   occupation  String?
   gender      String?
   nationality String?
   createdAt   DateTime  @default(now())
   updatedAt   DateTime  @updatedAt

   // Relation to User
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("profile")
}

model Attachment {
   id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   userId     String         @db.Uuid
   type       AttachmentType @default(BIRTH_CERTIFICATE)
   fileUrl    String
   fileName   String
   fileSize   Int
   mimeType   String
   status     String         @default("pending") // pending, verified, rejected
   uploadedAt DateTime       @default(now())
   updatedAt  DateTime       @updatedAt
   verifiedAt DateTime?
   notes      String?        @db.Text

   // Relation to User
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("attachment")
}
