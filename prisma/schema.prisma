generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

/// *
/// * User Model
/// * @model
/// * Central user entity for authentication and system access
/// * Relationships:
/// * - One-to-many with Sessions, Accounts, Queues
/// * - One-to-one with Profile
/// * - Many-to-many with Permissions
model User {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String             @unique
  name          String
  emailVerified Boolean
  image         String?
  username      String?            @unique
  role          UserRole           @default(ADMIN)
  permissions   Permission[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  lastLoginAt   DateTime?
  language      String?            @default("en")
  active        Boolean            @default(true)
  accounts      Account[]
  attachments   Attachment[]
  auditLogs     AuditLog[]
  preparedForms BaseRegistryForm[] @relation("PreparedBy")
  verifiedForms BaseRegistryForm[] @relation("VerifiedBy")
  feedback      Feedback[]
  notifications Notification[]
  profile       Profile?
  queues        Queue[]
  sessions      Session[]
  workflows     Workflow[]

  @@map("user")
}

/// *
/// * BaseRegistryForm Model
/// * @model
/// * Central model for all civil registry forms that stores common data and relationships
/// * Common model for Form 97 (Marriage), Form 102 (Birth), and Form 103 (Death)
/// * Features:
/// * - Common fields across all civil registry forms
/// * - Document tracking and management
/// * - Administrative processing details
model BaseRegistryForm {
  id                      String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formNumber              String                   @db.VarChar(3)
  formType                FormType
  registryNumber          String
  province                String
  cityMunicipality        String
  pageNumber              String
  bookNumber              String
  preparedById            String?                  @db.Uuid
  verifiedById            String?                  @db.Uuid
  receivedBy              String?
  receivedByPosition      String?
  receivedDate            DateTime?
  registeredBy            String?
  registeredByPosition    String?
  registrationDate        DateTime?
  dateOfRegistration      DateTime
  remarks                 String?
  lcroNotations           String?
  status                  DocumentStatus           @default(PENDING)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  preparedBy              User?                    @relation("PreparedBy", fields: [preparedById], references: [id])
  verifiedBy              User?                    @relation("VerifiedBy", fields: [verifiedById], references: [id])
  birthCertificateForm    BirthCertificateForm?
  deathCertificateForm    DeathCertificateForm?
  marriageCertificateForm MarriageCertificateForm?

  @@index([registryNumber])
  @@index([formNumber])
  @@index([dateOfRegistration])
  @@map("base_registry_form")
}

/// *
/// * MarriageCertificateForm Model (Form 97)
/// * @model
model MarriageCertificateForm {
  id                          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId                  String           @unique @db.Uuid
  husbandFirstName            String
  husbandMiddleName           String?
  husbandLastName             String
  husbandDateOfBirth          DateTime
  husbandAge                  Int
  husbandPlaceOfBirth         Json
  husbandSex                  String
  husbandCitizenship          String
  husbandResidence            String
  husbandReligion             String?
  husbandCivilStatus          String
  husbandFatherName           Json
  husbandFatherCitizenship    String
  husbandMotherMaidenName     Json
  husbandMotherCitizenship    String
  wifeFirstName               String
  wifeMiddleName              String?
  wifeLastName                String
  wifeDateOfBirth             DateTime
  wifeAge                     Int
  wifePlaceOfBirth            Json
  wifeSex                     String
  wifeCitizenship             String
  wifeResidence               String
  wifeReligion                String?
  wifeCivilStatus             String
  wifeFatherName              Json
  wifeFatherCitizenship       String
  wifeMotherMaidenName        Json
  wifeMotherCitizenship       String
  husbandConsentPerson        Json?
  wifeConsentPerson           Json?
  placeOfMarriage             Json
  dateOfMarriage              DateTime
  timeOfMarriage              String           @db.VarChar(8)
  marriageSettlement          Boolean          @default(false)
  contractingPartiesSignature Json?
  marriageLicenseDetails      Json?
  noMarriageLicense           Boolean          @default(false)
  executiveOrderApplied       Boolean          @default(false)
  presidentialDecreeApplied   Boolean          @default(false)
  solemnizingOfficer          Json
  solemnizingOfficerSignature String?
  witnesses                   Json[]
  baseForm                    BaseRegistryForm @relation(fields: [baseFormId], references: [id], onDelete: Cascade)

  @@index([husbandLastName, husbandFirstName])
  @@index([wifeLastName, wifeFirstName])
  @@index([dateOfMarriage])
  @@map("marriage_certificate_form")
}

/// *
/// * BirthCertificateForm Model (Form 102)
/// * @model
model BirthCertificateForm {
  id                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId              String           @unique @db.Uuid
  childName               Json
  sex                     String
  dateOfBirth             DateTime
  placeOfBirth            Json
  typeOfBirth             String
  multipleBirthOrder      String?
  birthOrder              String?
  weightAtBirth           Float
  motherMaidenName        Json
  motherCitizenship       String
  motherReligion          String?
  motherOccupation        String?
  motherAge               Int
  motherResidence         Json
  totalChildrenBornAlive  Int?
  childrenStillLiving     Int?
  childrenNowDead         Int?
  fatherName              Json
  fatherCitizenship       String
  fatherReligion          String?
  fatherOccupation        String?
  fatherAge               Int
  fatherResidence         Json
  parentMarriage          Json?
  attendant               Json
  informant               Json
  preparer                Json
  hasAffidavitOfPaternity Boolean          @default(false)
  baseForm                BaseRegistryForm @relation(fields: [baseFormId], references: [id], onDelete: Cascade)

  @@index([dateOfBirth])
  @@map("birth_certificate_form")
}

/// *
/// * DeathCertificateForm Model (Form 103)
/// * @model
model DeathCertificateForm {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId          String           @unique @db.Uuid
  deceasedName        Json
  sex                 String
  dateOfDeath         DateTime
  placeOfDeath        Json
  dateOfBirth         DateTime?
  placeOfBirth        Json
  civilStatus         String
  religion            String?
  citizenship         String
  residence           Json
  occupation          String?
  nameOfFather        Json
  nameOfMother        Json
  causesOfDeath       Json
  deathInterval       Json
  pregnancy           Boolean?
  attendedByPhysician Boolean
  mannerOfDeath       String?
  autopsyPerformed    Boolean?
  externalCause       String?
  placeOfOccurrence   String?
  certificationType   String
  certifier           Json
  disposalDetails     Json?
  informant           Json
  preparer            Json
  burialPermit        Json?
  baseForm            BaseRegistryForm @relation(fields: [baseFormId], references: [id], onDelete: Cascade)

  @@index([dateOfDeath])
  @@map("death_certificate_form")
}

/// *
/// * CertifiedCopy Model
/// * @model 
/// * Represents an application for a certified true copy of an attachment
/// * Features:
/// * - Applicant information
/// * - Application metadata
/// * - Relationship to the original attachment
model CertifiedCopy {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lcrNo               String?
  bookNo              String?
  pageNo              String?
  searchedBy          String?
  contactNo           String?
  date                DateTime?
  attachmentId        String     @db.Uuid
  address             String
  amountPaid          Float?
  createdAt           DateTime   @default(now())
  datePaid            DateTime?
  isRegistered        Boolean    @default(false)
  orNumber            String?
  purpose             String
  registeredDate      DateTime?
  relationshipToOwner String
  remarks             String?
  requesterName       String
  signature           String?
  updatedAt           DateTime   @updatedAt
  attachment          Attachment @relation(fields: [attachmentId], references: [id])

  @@map("certified_copy")
}

/// *
/// * Session Model
/// * @model
/// * Manages active user sessions
/// * Features:
/// * - Secure token management
/// * - Device tracking
/// * - Automatic cleanup
model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

/// *
/// * Account Model
/// * @model
/// * Handles external authentication providers
/// * Features:
/// * - OAuth token management
/// * - Multiple provider support
/// * - Automatic token refresh
model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountId             String
  providerId            String
  userId                String    @db.Uuid
  password              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

/// *
/// * Verification Model
/// * @model
/// * Handles time-sensitive verification tokens
/// * Used for:
/// * - Email verification
/// * - Password reset
/// * - Account confirmation
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

/// *
/// * Queue Model
/// * @model
/// * Manages document service requests
/// * Features:
/// * - Automatic ticket numbering
/// * - Status tracking
/// * - Processing notes
model Queue {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketNumber    Int         @unique @default(autoincrement())
  kioskNumber     Int?
  status          QueueStatus @default(WAITING)
  serviceType     ServiceType
  userId          String?     @db.Uuid
  email           String?
  documents       String[]
  processingNotes String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  user            User?       @relation(fields: [userId], references: [id])

  @@map("queue")
}

/// *
/// * Profile Model
/// * @model
/// * Extended user information
/// * Stores:
/// * - Personal details
/// * - Contact information
/// * - Demographic data
model Profile {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @unique @db.Uuid
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  bio         String?
  occupation  String?
  gender      String?
  nationality String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

/// *
/// * Document Model
/// * @model
/// * Central document repository
/// * Features:
/// * - Version control
/// * - Metadata storage
/// * - Workflow integration
model Document {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          AttachmentType
  title         String
  description   String?
  metadata      Json?
  status        DocumentStatus @default(PENDING)
  version       Int            @default(1)
  isLatest      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  attachments   Attachment[]
  auditLogs     AuditLog[]
  workflowSteps WorkflowStep[]

  @@map("document")
}

/// *
/// * Attachment Model
/// * @model
/// * Handles physical document files
/// * Features:
/// * - File metadata
/// * - Document verification
/// * - Processing status
model Attachment {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String          @db.Uuid
  documentId      String          @db.Uuid
  type            AttachmentType
  fileUrl         String
  fileName        String
  fileSize        Int
  mimeType        String
  status          DocumentStatus  @default(PENDING)
  uploadedAt      DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  verifiedAt      DateTime?
  notes           String?
  metadata        Json?
  hash            String?
  document        Document        @relation(fields: [documentId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  certifiedCopies CertifiedCopy[]

  @@map("attachment")
}

/// *
/// * Workflow Model
/// * @model
/// * Defines document processing workflows
/// * Features:
/// * - Customizable steps
/// * - Active status tracking
/// * - Creator attribution
model Workflow {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String         @db.Uuid
  user        User           @relation(fields: [createdBy], references: [id])
  steps       WorkflowStep[]

  @@map("workflow")
}

/// *
/// * WorkflowStep Model
/// * @model
/// * Individual workflow process steps
/// * Features:
/// * - Order management
/// * - Deadline tracking
/// * - Requirement flags
model WorkflowStep {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflowId String    @db.Uuid
  documentId String    @db.Uuid
  name       String
  order      Int
  isRequired Boolean   @default(true)
  deadline   DateTime?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document  @relation(fields: [documentId], references: [id])
  workflow   Workflow  @relation(fields: [workflowId], references: [id])

  @@map("workflow_step")
}

/// *
/// * Notification Model
/// * @model
/// * System notification management
/// * Features:
/// * - Multiple notification types
/// * - Read status tracking
/// * - Timestamp logging
model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation(fields: [userId], references: [id])

  @@map("notification")
}

/// *
/// * AuditLog Model
/// * @model
/// * System activity tracking
/// * Features:
/// * - Detailed action logging
/// * - Entity tracking
/// * - User attribution
model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  action     String
  entityType String
  entityId   String   @db.Uuid
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [entityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

/// *
/// * Feedback Model
/// * @model
/// * Allows for user-submitted feedback
model Feedback {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedback    String
  submittedBy String?  @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [submittedBy], references: [id])

  @@map("feedback")
}

enum AttendantType {
  PHYSICIAN
  NURSE
  MIDWIFE
  HILOT
  OTHERS
}

enum CauseOfDeathType {
  IMMEDIATE
  ANTECEDENT
  UNDERLYING
  OTHER_SIGNIFICANT
}

enum MannerOfDeath {
  NATURAL
  ACCIDENT
  SUICIDE
  HOMICIDE
  UNDETERMINED
}

/// *
/// * Defines the types of civil registry forms
/// * @enum {string}
enum FormType {
  MARRIAGE
  BIRTH
  DEATH
}

/// *
/// * Defines user role levels in the system
/// * @enum {string}
/// * - ADMIN: Full system access and management capabilities
/// * - STAFF: Limited administrative access for daily operations
/// * - USER: Basic access for standard users
enum UserRole {
  ADMIN
  STAFF
  USER
}

/// *
/// * Defines the possible states of a queue item
/// * @enum {string}
/// * - WAITING: Initial state when request is created
/// * - PROCESSING: Request is being handled by staff
/// * - COMPLETED: Request has been successfully processed
/// * - CANCELLED: Request was terminated before completion
enum QueueStatus {
  WAITING
  PROCESSING
  COMPLETED
  CANCELLED
}

/// *
/// * Defines the types of services available
/// * @enum {string}
/// * - TRUE_COPY: Request for certified true copies
/// * - VERIFY: Document verification service
/// * - CERTIFICATION: New certificate issuance
/// * - AUTHENTICATION: Document authentication service
enum ServiceType {
  TRUE_COPY
  VERIFY
  CERTIFICATION
  AUTHENTICATION
}

/// *
/// * Defines granular system permissions
/// * @enum {string}
/// * Each permission controls access to specific system functionality
enum Permission {
  QUEUE_VIEW
  QUEUE_PROCESS
  QUEUE_DELETE
  QUEUE_UPDATE
  QUEUE_ADD_NOTES
  USERS_MANAGE
  DOCUMENTS_MANAGE
  WORKFLOW_MANAGE
  REPORTS_VIEW
  SYSTEM_SETTINGS
}

/// *
/// * Defines document processing states
/// * @enum {string}
/// * Tracks the verification status of documents
enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

/// *
/// * Defines notification delivery channels
/// * @enum {string}
/// * Supports multiple communication methods
enum NotificationType {
  EMAIL
  SYSTEM
  SMS
}

/// *
/// * Defines types of civil registry documents
/// * @enum {string}
/// * Categories for different certificate types
enum AttachmentType {
  BIRTH_CERTIFICATE
  DEATH_CERTIFICATE
  MARRIAGE_CERTIFICATE
}
