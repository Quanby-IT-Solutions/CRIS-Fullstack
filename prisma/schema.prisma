// =================================================================
// Prisma Schema Configuration
// =================================================================
generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("PG_DATABASE_URL")
}

// =================================================================
// Queue Management Documentation
// =================================================================
/**
 * Queue System Setup and Maintenance
 * --------------------------------
 * 1. Initial Setup:
 * - Run `npx prisma generate` to update Prisma Client with Queue model
 * - Run `npx prisma migrate dev --name add_queue_system` for initial queue table
 * 2. Making Schema Changes:
 * - Update schema in this file
 * - Run `npx prisma generate` to update client
 * - Run `npx prisma migrate dev --name describe_your_change`
 * 3. Development Tools:
 * - Use `npx prisma studio` to view and manage queue data
 * - Use `npx prisma migrate reset` to reset queue during development
 * 4. Queue Status Types:
 * - "waiting"    : Request is in queue
 * - "processing" : Currently being handled
 * - "completed"  : Request fulfilled
 * - "cancelled"  : Request cancelled
 * 5. Service Types:
 * - "trueCopy"   : Request for document copies
 * - "verify"     : Account verification request
 * 6. Important Notes:
 * - Queue numbers auto-increment
 * - Timestamps auto-generate
 * - User relation is optional
 * - Documents field stores array of document types
 */

// =================================================================
// Authentication Models
// =================================================================
// Generated using @better-auth/cli with custom modifications
// Integration with NextAuth.js: https://authjs.dev/getting-started/adapters/prisma

enum UserRole {
   ADMIN
   STAFF
   USER
}

enum QueueStatus {
   WAITING
   PROCESSING
   COMPLETED
   CANCELLED
}

enum ServiceType {
   TRUE_COPY
   VERIFY
}

model User {
   id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   email         String   @unique
   name          String
   emailVerified Boolean
   image         String?
   username      String?  @unique
   role          UserRole @default(USER)
   createdAt     DateTime
   updatedAt     DateTime

   // Relations
   sessions Session[]
   accounts Account[]
   queues   Queue[]
  profile       Profile?
  attachments   Attachment[]

   @@map("user")
}

model Session {
   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   expiresAt DateTime
   token     String   @unique
   createdAt DateTime
   updatedAt DateTime
   ipAddress String?
   userAgent String?
   userId    String   @db.Uuid
   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("session")
}


model Account {
   id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   accountId             String
   providerId            String
   userId                String    @db.Uuid
   user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
   password              String?
   accessToken           String?
   refreshToken          String?
   idToken               String?
   accessTokenExpiresAt  DateTime?
   refreshTokenExpiresAt DateTime?
   scope                 String?
   createdAt             DateTime
   updatedAt             DateTime

   @@map("account")
}

model Verification {
   id         String    @id
   identifier String
   value      String
   expiresAt  DateTime
   createdAt  DateTime?
   updatedAt  DateTime?

   @@map("verification")
}

// =================================================================
// CRIS Custom Tables
// =================================================================

model Queue {
   id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   ticketNumber    Int         @unique @default(autoincrement())
   status          QueueStatus @default(WAITING)
   serviceType     ServiceType
   userId          String?     @db.Uuid
   email           String?
   documents       String[]
   processingNotes String?
   createdAt       DateTime    @default(now())
   updatedAt       DateTime    @updatedAt
   completedAt     DateTime?

   // Relations
   user User? @relation(fields: [userId], references: [id])

   @@map("queue")
}



enum AttachmentType {
  BIRTH_CERTIFICATE
  DEATH_CERTIFICATE
  MARRIAGE_CERTIFICATE
}

model Profile {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String    @unique @db.Uuid
  dateOfBirth     DateTime?
  phoneNumber     String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  bio             String?   @db.Text
  occupation      String?
  gender          String?
  nationality     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relation to User
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}


model Attachment {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String         @db.Uuid
  type        AttachmentType @default(BIRTH_CERTIFICATE)
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String
  status      String        @default("pending") // pending, verified, rejected
  uploadedAt  DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  verifiedAt  DateTime?
  notes       String?       @db.Text

  // Relation to User
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attachment")
}

// =================================================================
// Prisma CLI Commands Reference
// =================================================================
/**
 * Initial Setup:
 * -------------
 * - prisma init                 : Initialize a new Prisma project
 * - npx prisma generate         : Generate Prisma Client
 * - npx @better-auth/cli init   : Initialize Better Auth (requires: pnpm add @better-auth/cli)
 * Database Operations:
 * ------------------
 * - npx prisma db push         : Push schema changes directly to database
 * - npx prisma migrate dev     : Create a new migration and apply it
 * - npx prisma migrate reset   : Reset database to initial state
 * - npx prisma db seed        : Run database seeding
 * - npx @better-auth/cli migrate: Run Better Auth migrations
 * Development Tools:
 * ----------------
 * - npx prisma studio         : Open Prisma Studio (database GUI)
 * Common Workflows:
 * ---------------
 * 1. Making schema changes:
 * - Update schema.prisma
 * - Run 'npx prisma generate'
 * - Run 'npx prisma db push' (development) or 'npx prisma migrate dev' (production)
 * 2. Resetting database:
 * - Run 'npx prisma migrate reset'
 * - Run 'npx prisma db seed' (if needed)
 * 3. Viewing data:
 * - Run 'npx prisma studio'
 */
