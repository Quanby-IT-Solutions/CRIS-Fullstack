// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

/// *
/// * User Model
/// * @model
/// * Central user entity for authentication and system access
/// * Relationships:
/// * - One-to-many with Sessions, Accounts, Queues
/// * - One-to-one with Profile
/// * - Many-to-many with Permissions
model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String       @unique
  name          String
  emailVerified Boolean
  image         String?
  username      String?      @unique
  role          UserRole     @default(ADMIN)
  permissions   Permission[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastLoginAt   DateTime?
  language      String?      @default("en")
  active        Boolean      @default(true)

  accounts      Account[]
  attachments   Attachment[]
  auditLogs     AuditLog[]
  notifications Notification[]
  profile       Profile?
  queues        Queue[]
  sessions      Session[]
  workflows     Workflow[]
  feedback      Feedback[]
  preparedForms BaseRegistryForm[] @relation("PreparedBy")
  verifiedForms BaseRegistryForm[] @relation("VerifiedBy")



  @@map("user")
}

/// *
/// * BaseRegistryForm Model
/// * @model
/// * Central model for all civil registry forms that stores common data and relationships
/// * Common model for Form 97 (Marriage), Form 102 (Birth), and Form 103 (Death)
/// * Features:
/// * - Common fields across all civil registry forms
/// * - Document tracking and management
/// * - Administrative processing details
model BaseRegistryForm {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formNumber         String @db.VarChar(3)  // Since it's always "97", "102", or "103"
  formType           FormType     // MARRIAGE, BIRTH, DEATH
  
  // Common Registry Information
  registryNumber     String       // Required in all forms (top right)
  province           String       // Required in all forms
  cityMunicipality   String       // Required in all forms
  
  // Document Filing Info
  pageNumber         String      // Required in all forms (bottom filing)
  bookNumber         String      // Required in all forms (bottom filing)
  
  // Administrative Processing
  preparedById       String?      @db.Uuid
  preparedBy         User?        @relation("PreparedBy", fields: [preparedById], references: [id])
  verifiedById       String?      @db.Uuid
  verifiedBy         User?        @relation("VerifiedBy", fields: [verifiedById], references: [id])
  
  // RECEIVED BY Section (common in all forms)
  receivedBy         String?     // Name in Print
  receivedByPosition String?     // Title or Position
  receivedDate       DateTime?
  
  // REGISTERED Section (common in all forms)
  registeredBy       String?     // Name in Print
  registeredByPosition String?   // Title or Position
  registrationDate   DateTime?   // Date of Registration
  dateOfRegistration DateTime    // Required date when event was registered
  
  // Document Management
  remarks            String?     // REMARKS/ANNOTATIONS (For LCRO/OCRG Use Only) - present in all forms
  
  // For LCRO/OCRG Use Only (bottom coding present in all forms)
  // Form 97: 4bH-7W
  // Form 102: 8-19
  // Form 103: 10-11
  lcroNotations      String?
  
  // Status Tracking
  status            DocumentStatus @default(PENDING)
  
  // Timestamps
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations to specific form types
  marriageCertificateForm  MarriageCertificateForm?
  birthCertificateForm     BirthCertificateForm?
  deathCertificateForm     DeathCertificateForm?

  @@map("base_registry_form")
  @@index([registryNumber])
  @@index([formNumber])
  @@index([dateOfRegistration])
}


/// *
/// * MarriageCertificateForm Model (Form 97)
/// * @model
model MarriageCertificateForm {
  id                          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId                  String           @unique @db.Uuid
  baseForm  BaseRegistryForm @relation(fields: [baseFormId], references: [id], onDelete: Cascade)

  // 1. Contracting Parties: Husband
  husbandFirstName            String
  husbandMiddleName          String?
  husbandLastName            String
  husbandDateOfBirth         DateTime        // 2a
  husbandAge                 Int             // 2b
  husbandPlaceOfBirth        Json            // 3 {cityMunicipality, province, country}
  husbandCitizenship         String          // 4b
  husbandResidence           String          // 5
  husbandReligion            String?         // 6
  husbandCivilStatus         String          // 7
  
  // Husband's Parents (8-11)
  husbandFatherName          Json            // 8 {first, middle, last}
  husbandFatherCitizenship   String          // 9
  husbandMotherMaidenName    Json            // 10 {first, middle, last}
  husbandMotherCitizenship   String          // 11

  // Wife Details (Same structure as husband)
  wifeFirstName              String
  wifeMiddleName            String?
  wifeLastName              String
  wifeDateOfBirth           DateTime
  wifeAge                   Int
  wifePlaceOfBirth          Json         // {cityMunicipality, province, country}
  wifeCitizenship           String
  wifeResidence             String
  wifeReligion              String?
  wifeCivilStatus           String

  // Wife's Parents
  wifeFatherName            Json         // {first, middle, last}
  wifeFatherCitizenship     String
  wifeMotherMaidenName      Json         // {first, middle, last}
  wifeMotherCitizenship     String

  // 12-14 Person Who Gave Consent
  husbandConsentPerson      Json?        // {name: {first, middle, last}, relationship, residence}
  wifeConsentPerson         Json?        // {name: {first, middle, last}, relationship, residence}

  // 15-17 Marriage Event Details
  placeOfMarriage           Json         // {office, cityMunicipality, province}
  dateOfMarriage            DateTime
  timeOfMarriage String @db.VarChar(8)  // For "HH:mm AM/PM" format

  // 18-19 Certification Details
  marriageSettlement        Boolean      @default(false)
  contractingPartiesSignature Json?      // {husband: string, wife: string}
  
  // Marriage License Details
  marriageLicenseDetails     Json?       // {number, dateIssued, placeIssued}
  noMarriageLicense         Boolean      @default(false)
  executiveOrderApplied     Boolean      @default(false)
  presidentialDecreeApplied Boolean      @default(false)

  // Solemnizing Details
  solemnizingOfficer        Json         // {name, position, religion, registryNoExpiryDate}
  solemnizingOfficerSignature String?

  // 20a Witnesses
  witnesses                 Json[]       // Array of {name, address}

  @@map("marriage_certificate_form")
  @@index([husbandLastName, husbandFirstName])
  @@index([wifeLastName, wifeFirstName])
  @@index([dateOfMarriage])
}

/// *
/// * BirthCertificateForm Model (Form 102)
/// * @model
model BirthCertificateForm {
  id                          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId                  String           @unique @db.Uuid
  baseForm  BaseRegistryForm @relation(fields: [baseFormId], references: [id], onDelete: Cascade)

  // Child Information (1-6)
  childName                   Json            // {first, middle, last}
  sex                        String          // (Male/Female)
  dateOfBirth                DateTime
  placeOfBirth               Json            // {hospital, houseNo, barangay, cityMunicipality, province}
  typeOfBirth                String          // 5a (Single, Twin, Triplet, etc.)
  multipleBirthOrder         String?         // 5b (First, Second, Third, etc.)
  birthOrder                 String?         // 5c
  weightAtBirth              Float           // 6 (in grams)

  // Mother Information (7-13)
  motherMaidenName           Json            // 7 {first, middle, last}
  motherCitizenship          String          // 8
  motherReligion             String?         // 9
  motherOccupation           String?         // 11
  motherAge                  Int             // 12
  motherResidence            Json            // 13 {houseNo, barangay, cityMunicipality, province, country}
  
  // Birth Order Statistics
  totalChildrenBornAlive     Int?            // 10a
  childrenStillLiving        Int?            // 10b
  childrenNowDead            Int?            // 10c

  // Father Information (14-19)
  fatherName                 Json            // 14 {first, middle, last}
  fatherCitizenship          String          // 15
  fatherReligion             String?         // 16
  fatherOccupation           String?         // 17
  fatherAge                  Int             // 18
  fatherResidence            Json            // 19 {houseNo, barangay, cityMunicipality, province, country}

  // Marriage of Parents
  parentMarriage             Json?           // 20 {date, place: {cityMunicipality, province, country}}
  
  // Certification Details (21-23)
  attendant                  Json            // 21a {type: ENUM, name, title, address, signature, date}
  informant                  Json            // 22 {name, signature, relationship, address, date}
  preparer                   Json            // 23 {name, signature, title, date}

  // Additional Legal Details
  hasAffidavitOfPaternity    Boolean         @default(false)

  @@map("birth_certificate_form")
  @@index([dateOfBirth])
}

/// *
/// * DeathCertificateForm Model (Form 103)
/// * @model
model DeathCertificateForm {
  id                          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  baseFormId                  String           @unique @db.Uuid
  baseForm  BaseRegistryForm @relation(fields: [baseFormId], references: [id], onDelete: Cascade)

  // Deceased Information (1-7)
  deceasedName               Json            // 1 {first, middle, last}
  sex                        String          // 2
  dateOfDeath                DateTime        // 3
  placeOfDeath               Json            // 4 {houseNo, barangay, cityMunicipality, province}
  dateOfBirth                DateTime?       // 5
  placeOfBirth               Json            // 6 {cityMunicipality, province}
  civilStatus                String          // 7

  // Additional Personal Info (8-13)
  religion                   String?         // 8
  citizenship                String          // 9
  residence                  Json            // 10 {houseNo, barangay, cityMunicipality, province}
  occupation                 String?         // 11
  nameOfFather               Json            // 12 {first, middle, last}
  nameOfMother               Json            // 13 {first, middle, last}

  // Medical Certificate (14-19)
  causesOfDeath              Json            // {
                                            //   immediate: string,
                                            //   antecedent: string,
                                            //   underlying: string,
                                            //   otherSignificant: string
                                            // }
  deathInterval              Json            // Interval between onset and death
  pregnancy                  Boolean?        // If female, pregnancy-related
  attendedByPhysician        Boolean
  mannerOfDeath              String?         // Natural, Accident, Suicide, Homicide
  autopsyPerformed          Boolean?
  externalCause             String?
  placeOfOccurrence         String?

  // Medical Certification (20-23)
  certificationType         String          // Hospital Authority, Private, Public, Other
  certifier                 Json            // {name, title, address, signature, date}
  disposalDetails          Json?           // {method, place, date}
  
  // Certification Details
  informant                 Json            // {name, signature, relationship, address, date}
  preparer                  Json            // {name, signature, title, date}
  
  // Additional Details
  burialPermit             Json?           // {number, date, cemetery}

  @@map("death_certificate_form")
  @@index([dateOfDeath])
}

// Supporting ENUMs
enum AttendantType {
  PHYSICIAN
  NURSE
  MIDWIFE
  HILOT
  OTHERS
}

enum CauseOfDeathType {
  IMMEDIATE
  ANTECEDENT
  UNDERLYING
  OTHER_SIGNIFICANT
}

enum MannerOfDeath {
  NATURAL
  ACCIDENT
  SUICIDE
  HOMICIDE
  UNDETERMINED
}



/// *
/// * CertifiedCopy Model
/// * @model 
/// * Represents an application for a certified true copy of an attachment
/// * Features:
/// * - Applicant information
/// * - Application metadata
/// * - Relationship to the original attachment
model CertifiedCopy {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lcrNo               String?
  bookNo              String?
  pageNo              String?
  searchedBy          String?
  contactNo           String?
  date                DateTime?
  attachment          Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId        String     @db.Uuid
  requesterName       String
  relationshipToOwner String
  address             String
  purpose             String
  remarks             String?
  signature           String?
  amountPaid          Float?
  orNumber            String?
  datePaid            DateTime?
  registeredDate      DateTime?
  isRegistered        Boolean    @default(false)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("certified_copy")
}

/// *
/// * Defines the types of civil registry forms
/// * @enum {string}
enum FormType {
  MARRIAGE
  BIRTH
  DEATH
}

/// *
/// * Session Model
/// * @model
/// * Manages active user sessions
/// * Features:
/// * - Secure token management
/// * - Device tracking
/// * - Automatic cleanup
model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

/// *
/// * Account Model
/// * @model
/// * Handles external authentication providers
/// * Features:
/// * - OAuth token management
/// * - Multiple provider support
/// * - Automatic token refresh
model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accountId             String
  providerId            String
  userId                String    @db.Uuid
  password              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

/// *
/// * Verification Model
/// * @model
/// * Handles time-sensitive verification tokens
/// * Used for:
/// * - Email verification
/// * - Password reset
/// * - Account confirmation
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

/// *
/// * Queue Model
/// * @model
/// * Manages document service requests
/// * Features:
/// * - Automatic ticket numbering
/// * - Status tracking
/// * - Processing notes
model Queue {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketNumber    Int         @unique @default(autoincrement())
  kioskNumber     Int?
  status          QueueStatus @default(WAITING)
  serviceType     ServiceType
  userId          String?     @db.Uuid
  email           String?
  documents       String[]
  processingNotes String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  user            User?       @relation(fields: [userId], references: [id])

  @@map("queue")
}

/// *
/// * Profile Model
/// * @model
/// * Extended user information
/// * Stores:
/// * - Personal details
/// * - Contact information
/// * - Demographic data
model Profile {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @unique @db.Uuid
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  bio         String?
  occupation  String?
  gender      String?
  nationality String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

/// *
/// * Document Model
/// * @model
/// * Central document repository
/// * Features:
/// * - Version control
/// * - Metadata storage
/// * - Workflow integration
model Document {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          AttachmentType
  title         String
  description   String?
  metadata      Json?
  status        DocumentStatus @default(PENDING)
  version       Int            @default(1)
  isLatest      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  attachments   Attachment[]
  auditLogs     AuditLog[]
  workflowSteps WorkflowStep[]

  @@map("document")
}

/// *
/// * Attachment Model
/// * @model
/// * Handles physical document files
/// * Features:
/// * - File metadata
/// * - Document verification
/// * - Processing status
model Attachment {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String          @db.Uuid
  documentId      String          @db.Uuid
  type            AttachmentType
  fileUrl         String
  fileName        String
  fileSize        Int
  mimeType        String
  status          DocumentStatus  @default(PENDING)
  uploadedAt      DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  verifiedAt      DateTime?
  notes           String?
  metadata        Json?
  hash            String?
  document        Document        @relation(fields: [documentId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  certifiedCopies CertifiedCopy[]

  @@map("attachment")
}

/// *
/// * Workflow Model
/// * @model
/// * Defines document processing workflows
/// * Features:
/// * - Customizable steps
/// * - Active status tracking
/// * - Creator attribution
model Workflow {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   String         @db.Uuid
  user        User           @relation(fields: [createdBy], references: [id])
  steps       WorkflowStep[]

  @@map("workflow")
}

/// *
/// * WorkflowStep Model
/// * @model
/// * Individual workflow process steps
/// * Features:
/// * - Order management
/// * - Deadline tracking
/// * - Requirement flags
model WorkflowStep {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflowId String    @db.Uuid
  documentId String    @db.Uuid
  name       String
  order      Int
  isRequired Boolean   @default(true)
  deadline   DateTime?
  status     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document  @relation(fields: [documentId], references: [id])
  workflow   Workflow  @relation(fields: [workflowId], references: [id])

  @@map("workflow_step")
}

/// *
/// * Notification Model
/// * @model
/// * System notification management
/// * Features:
/// * - Multiple notification types
/// * - Read status tracking
/// * - Timestamp logging
model Notification {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String           @db.Uuid
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation(fields: [userId], references: [id])

  @@map("notification")
}

/// *
/// * AuditLog Model
/// * @model
/// * System activity tracking
/// * Features:
/// * - Detailed action logging
/// * - Entity tracking
/// * - User attribution
model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  action     String
  entityType String
  entityId   String   @db.Uuid
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  document   Document @relation(fields: [entityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

/// *
/// * Feedback Model
/// * @model
/// * Allows for user-submitted feedback
model Feedback {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feedback    String
  submittedBy String?  @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [submittedBy], references: [id])

  @@map("feedback")
}

/// *
/// * Defines user role levels in the system
/// * @enum {string}
/// * - ADMIN: Full system access and management capabilities
/// * - STAFF: Limited administrative access for daily operations
/// * - USER: Basic access for standard users
enum UserRole {
  ADMIN
  STAFF
  USER
}

/// *
/// * Defines the possible states of a queue item
/// * @enum {string}
/// * - WAITING: Initial state when request is created
/// * - PROCESSING: Request is being handled by staff
/// * - COMPLETED: Request has been successfully processed
/// * - CANCELLED: Request was terminated before completion
enum QueueStatus {
  WAITING
  PROCESSING
  COMPLETED
  CANCELLED
}

/// *
/// * Defines the types of services available
/// * @enum {string}
/// * - TRUE_COPY: Request for certified true copies
/// * - VERIFY: Document verification service
/// * - CERTIFICATION: New certificate issuance
/// * - AUTHENTICATION: Document authentication service
enum ServiceType {
  TRUE_COPY
  VERIFY
  CERTIFICATION
  AUTHENTICATION
}

/// *
/// * Defines granular system permissions
/// * @enum {string}
/// * Each permission controls access to specific system functionality
enum Permission {
  QUEUE_VIEW
  QUEUE_PROCESS
  QUEUE_DELETE
  QUEUE_UPDATE
  QUEUE_ADD_NOTES
  USERS_MANAGE
  DOCUMENTS_MANAGE
  WORKFLOW_MANAGE
  REPORTS_VIEW
  SYSTEM_SETTINGS
}

/// *
/// * Defines document processing states
/// * @enum {string}
/// * Tracks the verification status of documents
enum DocumentStatus {
  PENDING 
  VERIFIED
  REJECTED
  EXPIRED
}





/// *
/// * Defines notification delivery channels
/// * @enum {string}
/// * Supports multiple communication methods
enum NotificationType {
  EMAIL
  SYSTEM
  SMS
}

/// *
/// * Defines types of civil registry documents
/// * @enum {string}
/// * Categories for different certificate types
enum AttachmentType {
  BIRTH_CERTIFICATE
  DEATH_CERTIFICATE
  MARRIAGE_CERTIFICATE
}



// For later use
// enum CivilStatus {
//   SINGLE
//   MARRIED
//   WIDOWED
//   DIVORCED
//   SEPARATED
// }

// enum Sex {
//   MALE
//   FEMALE
// }





